# Generated by Django 3.1.4 on 2020-12-17 15:14
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import olmap.models.osm_image_notes
from olmap.rest.permissions import REVIEWER_GROUP
import re, requests
import csv

from pyproj import Transformer



def import_turku_addresses(apps, schema_editor):
    if settings.TEST:
        return

    transformer = Transformer.from_crs('epsg:3067', 'epsg:4326')
    Address = apps.get_model('olmap', 'Address')

    print('Loading address data...')
    response = requests.get('https://www.avoindata.fi/data/dataset/cf9208dc-63a9-44a2-9312-bbd2c3952596/resource/986fbcd8-589f-460c-81a3-5efb8ab4b880/download/02_osoitteet_2020-08-14.opt')
    print('Finished loading.')
    content = response.content.decode('iso8859-15')
    address_lines = csv.reader(content.splitlines(), delimiter=';')
    addresses_out = []
    for line in address_lines:
        n = line[4]
        e = line[5]
        street = line[7]
        housenumber = line[9]
        if not (street and housenumber):
            continue
        if re.fullmatch(r'\d+-\d+', housenumber):
            parts = housenumber.split('-')
            nrs = list(range(int(parts[0]), int(parts[1]) + 1, 2))
        else:
            nrs = [housenumber]
        coord = transformer.transform(e, n)
        for nr in nrs:
            props = {
                "street": street,
                "housenumber": str(nr),
                "country": 'Finland',
                "official": True,
                "lat": coord[0],
                "lon": coord[1]
            }
            addresses_out.append(Address(**props))
    Address.objects.bulk_create(addresses_out)


def import_helsinki_addresses(apps, schema_editor):
    if settings.TEST:
        return

    transformer = Transformer.from_crs('epsg:3879', 'epsg:4326')
    Address = apps.get_model('olmap', 'Address')

    response = requests.get('https://kartta.hel.fi/ws/geoserver/avoindata/wfs?version=1.1.0&request=GetFeature&typeName=avoindata:Osoiteluettelo_piste_rekisteritiedot&outputformat=json')
    addresses = response.json()

    addresses_out = []
    for f in addresses['features']:
        props = f['properties']
        if props['osoitenumero']:
            if re.fullmatch(r'\d+-\d+', props['osoitenumero']):
                parts = props['osoitenumero'].split('-')
                nrs = list(range(int(parts[0]), int(parts[1]) + 1, 2))
            else:
                nrs = [props['osoitenumero']]
            coord = transformer.transform(props['n'], props['e'])
            for nr in nrs:
                addresses_out.append(Address(**{
                    "street": props['katunimi'],
                    "housenumber": str(nr),
                    "street_address": props['katuosoite'],
                    "postal_code": props['postinumero'],
                    "city": 'Helsinki',
                    "country": 'Finland',
                    "official": True,
                    "lat": coord[0],
                    "lon": coord[1]
                }))

    Address.objects.bulk_create(addresses_out)


def add_reviewer_group(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Group.objects.get_or_create(name=REVIEWER_GROUP)


street_address_regex = re.compile(
    r'^(?P<street>.+?) +(?P<housenumber>[\d\-]+( ?[a-z])?) *((?P<unit>[A-Z]{1,2})[ ,])?.*$')


def sync_addresses(apps, schema_editor):
    def sync_street_address(self):
        if self.street_address:
            match = re.fullmatch(street_address_regex, self.street_address)
            if match and not self.street:
                self.street = match.group('street')
                self.housenumber = match.group('housenumber')
                self.unit = match.group('unit') or ''
        elif self.street and self.housenumber:
            self.street_address = f'{self.street} {self.housenumber} {self.unit or ""}'.strip()

    Address = apps.get_model('olmap', 'Address')
    for address in Address.objects.all():
        sync_street_address(address)
        address.save()


class Migration(migrations.Migration):

    replaces = [('olmap', '0001_initial'), ('olmap', '0002_add_user_groups'), ('olmap', '0003_userlocation'), ('olmap', '0004_auto_20191216_1331'), ('olmap', '0005_package_uuid'), ('olmap', '0006_packagesms'), ('olmap', '0007_osmfeature_osmimagenote'), ('olmap', '0008_auto_20200124_1211'), ('olmap', '0009_auto_20200124_1228'), ('olmap', '0010_auto_20200205_0723'), ('olmap', '0011_add_reviewer_group'), ('olmap', '0012_auto_20200218_1512'), ('olmap', '0013_auto_20200220_1039'), ('olmap', '0014_auto_20200220_1427'), ('olmap', '0015_add_sender_group'), ('olmap', '0016_auto_20200309_1014'), ('olmap', '0017_imagenotedownvote_imagenoteupvote'), ('olmap', '0018_osmimagenotecomment'), ('olmap', '0019_osmfeature_associated_entrances'), ('olmap', '0020_auto_20200327_0955'), ('olmap', '0021_auto_20200331_1502'), ('olmap', '0022_auto_20200331_1517'), ('olmap', '0023_auto_20200401_0956'), ('olmap', '0024_package_delivery_instructions'), ('olmap', '0025_auto_20200402_1257'), ('olmap', '0026_auto_20200403_0832'), ('olmap', '0027_auto_20200406_0902'), ('olmap', '0028_auto_20200427_0613'), ('olmap', '0029_auto_20200506_1325'), ('olmap', '0030_populate_courier_models'), ('olmap', '0031_auto_20200507_0751'), ('olmap', '0032_auto_20200507_0754'), ('olmap', '0033_auto_20200508_0729'), ('olmap', '0034_delete_userlocation'), ('olmap', '0035_ignoredholviproduct_requiredholviproduct'), ('olmap', '0036_auto_20200601_1323'), ('olmap', '0037_infoboard'), ('olmap', '0038_osmimagenote_processed_by'), ('olmap', '0039_auto_20200626_1613'), ('olmap', '0040_auto_20200827_1217'), ('olmap', '0041_sync_addresses'), ('olmap', '0042_address_official'), ('olmap', '0043_import_helsinki_addresses'), ('olmap', '0044_import_turku_addresses'), ('olmap', '0045_trafficsign'), ('olmap', '0046_auto_20201019_1122'), ('olmap', '0047_auto_20201022_1342'), ('olmap', '0048_transfer_tags'), ('olmap', '0049_delete_imagenotetag'), ('olmap', '0050_auto_20201030_1542'), ('olmap', '0051_auto_20201217_1340')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('street_address', models.CharField(max_length=128, verbose_name='street address')),
                ('postal_code', models.CharField(max_length=16, verbose_name='postal code')),
                ('city', models.CharField(max_length=64, verbose_name='city')),
                ('country', models.CharField(max_length=64, verbose_name='country')),
                ('lat', models.DecimalField(decimal_places=8, max_digits=11)),
                ('lon', models.DecimalField(decimal_places=8, max_digits=11)),
            ],
            options={
                'verbose_name': 'address',
                'verbose_name_plural': 'addresses',
            },
        ),
        migrations.CreateModel(
            name='OSMFeature',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='OSMImageNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('lat', models.DecimalField(decimal_places=8, max_digits=11)),
                ('lon', models.DecimalField(decimal_places=8, max_digits=11)),
                ('image', models.ImageField(blank=True, null=True, upload_to=olmap.models.osm_image_notes.upload_osm_images_to)),
                ('comment', models.TextField(blank=True)),
                ('osm_features', models.ManyToManyField(blank=True, to='olmap.OSMFeature')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_notes', to=settings.AUTH_USER_MODEL)),
                ('hidden_reason', models.TextField(blank=True, help_text='If reviewer decides to hide the note, document reason here.')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_notes', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_notes', to=settings.AUTH_USER_MODEL)),
                ('visible', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(
            code=add_reviewer_group,
        ),
        migrations.AlterModelOptions(
            name='osmfeature',
            options={'ordering': ['id']},
        ),
        migrations.CreateModel(
            name='Barrier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[['fence', 'fence'], ['wall', 'wall'], ['block', 'block'], ['bollard', 'bollard']], max_length=32)),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='olmap.osmimagenote')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Steps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_count', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('handrail', models.BooleanField(blank=True, null=True)),
                ('ramp', models.BooleanField(blank=True, null=True)),
                ('width', models.DecimalField(blank=True, decimal_places=2, help_text='In meters', max_digits=4, null=True)),
                ('incline', models.CharField(blank=True, choices=[['up', 'up'], ['down', 'down']], help_text='From street level', max_length=32)),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='olmap.osmimagenote')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entrance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(blank=True, max_length=64)),
                ('housenumber', models.CharField(blank=True, help_text='E.g. 3-5', max_length=8, null=True)),
                ('unit', models.CharField(blank=True, max_length=8)),
                ('access', models.CharField(blank=True, choices=[['yes', 'yes'], ['private', 'private'], ['delivery', 'delivery'], ['no', 'no']], max_length=32)),
                ('width', models.DecimalField(blank=True, decimal_places=2, help_text='In meters', max_digits=4, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='In meters', max_digits=4, null=True)),
                ('buzzer', models.BooleanField(blank=True, null=True)),
                ('keycode', models.BooleanField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=32)),
                ('opening_hours', models.CharField(blank=True, max_length=64)),
                ('type', models.CharField(blank=True, choices=[['main', 'main'], ['secondary', 'secondary'], ['service', 'service'], ['staircase', 'staircase']], max_length=32)),
                ('wheelchair', models.BooleanField(blank=True, null=True)),
                ('loadingdock', models.BooleanField(default=False)),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='olmap.osmimagenote')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Gate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access', models.CharField(blank=True, choices=[['yes', 'yes'], ['private', 'private'], ['delivery', 'delivery'], ['no', 'no']], max_length=32)),
                ('width', models.DecimalField(blank=True, decimal_places=2, help_text='In meters', max_digits=4, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='In meters', max_digits=4, null=True)),
                ('buzzer', models.BooleanField(blank=True, null=True)),
                ('keycode', models.BooleanField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=32)),
                ('opening_hours', models.CharField(blank=True, max_length=64)),
                ('lift_gate', models.BooleanField(default=False)),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='olmap.osmimagenote')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImageNoteUpvote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='upvotes', to='olmap.osmimagenote')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image_note_upvotes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ImageNoteDownvote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downvotes', to='olmap.osmimagenote')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image_note_downvotes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OSMImageNoteComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('comment', models.TextField()),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='olmap.osmimagenote')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image_note_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='osmfeature',
            name='associated_entrances',
            field=models.ManyToManyField(blank=True, related_name='associated_features', to='olmap.OSMFeature'),
        ),
        migrations.AlterField(
            model_name='osmimagenote',
            name='osm_features',
            field=models.ManyToManyField(blank=True, related_name='image_notes', to='olmap.OSMFeature'),
        ),
        migrations.AlterField(
            model_name='address',
            name='lat',
            field=models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True),
        ),
        migrations.AlterField(
            model_name='address',
            name='lon',
            field=models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True),
        ),
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(blank=True, max_length=64)),
                ('housenumber', models.CharField(blank=True, help_text='E.g. 3-5', max_length=8, null=True)),
                ('unit', models.CharField(blank=True, max_length=8)),
                ('name', models.CharField(blank=True, max_length=64)),
                ('phone', models.CharField(blank=True, max_length=32)),
                ('opening_hours', models.CharField(blank=True, max_length=64)),
                ('level', models.CharField(blank=True, help_text='Floor(s), e.g. 1-3', max_length=8)),
                ('type', models.CharField(help_text='See https://wiki.openstreetmap.org/wiki/Key:amenity', max_length=32)),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='olmap.osmimagenote')),
                ('delivery_covid19', models.CharField(blank=True, max_length=64)),
                ('opening_hours_covid19', models.CharField(blank=True, max_length=64)),
                ('takeaway_covid19', models.CharField(blank=True, max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Office',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(blank=True, max_length=64)),
                ('housenumber', models.CharField(blank=True, help_text='E.g. 3-5', max_length=8, null=True)),
                ('unit', models.CharField(blank=True, max_length=8)),
                ('name', models.CharField(blank=True, max_length=64)),
                ('phone', models.CharField(blank=True, max_length=32)),
                ('opening_hours', models.CharField(blank=True, max_length=64)),
                ('level', models.CharField(blank=True, help_text='Floor(s), e.g. 1-3', max_length=8)),
                ('type', models.CharField(blank=True, choices=[['association', 'association'], ['company', 'company'], ['diplomatic', 'diplomatic'], ['educational_institution', 'educational_institution'], ['government', 'government']], max_length=32)),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='olmap.osmimagenote')),
                ('opening_hours_covid19', models.CharField(blank=True, max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(blank=True, max_length=64)),
                ('housenumber', models.CharField(blank=True, help_text='E.g. 3-5', max_length=8, null=True)),
                ('unit', models.CharField(blank=True, max_length=8)),
                ('name', models.CharField(blank=True, max_length=64)),
                ('phone', models.CharField(blank=True, max_length=32)),
                ('opening_hours', models.CharField(blank=True, max_length=64)),
                ('level', models.CharField(blank=True, help_text='Floor(s), e.g. 1-3', max_length=8)),
                ('type', models.CharField(blank=True, help_text='See https://wiki.openstreetmap.org/wiki/Key:shop', max_length=32)),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='olmap.osmimagenote')),
                ('opening_hours_covid19', models.CharField(blank=True, max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='osmimagenote',
            name='lat',
            field=models.DecimalField(decimal_places=8, max_digits=11, null=True),
        ),
        migrations.AlterField(
            model_name='osmimagenote',
            name='lon',
            field=models.DecimalField(decimal_places=8, max_digits=11, null=True),
        ),
        migrations.CreateModel(
            name='InfoBoard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[['map', 'map'], ['board', 'board']], default='board', max_length=32)),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='olmap.osmimagenote')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='osmimagenote',
            name='processed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_notes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='osmimagenote',
            name='lat',
            field=models.DecimalField(decimal_places=8, default=0, max_digits=11),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='osmimagenote',
            name='lon',
            field=models.DecimalField(decimal_places=8, default=0, max_digits=11),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='address',
            name='housenumber',
            field=models.CharField(blank=True, help_text='E.g. 3-5', max_length=8, null=True),
        ),
        migrations.AddField(
            model_name='address',
            name='street',
            field=models.CharField(blank=True, max_length=64),
        ),
        migrations.AddField(
            model_name='address',
            name='unit',
            field=models.CharField(blank=True, max_length=8),
        ),
        migrations.RunPython(
            code=sync_addresses,
        ),
        migrations.AddField(
            model_name='address',
            name='official',
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(
            code=import_helsinki_addresses,
        ),
        migrations.RunPython(
            code=import_turku_addresses,
        ),
        migrations.CreateModel(
            name='TrafficSign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[['Max height', 'Max height'], ['Max weight', 'Max weight'], ['No stopping', 'No stopping'], ['No parking', 'No parking'], ['Loading zone', 'Loading zone'], ['Parking', 'Parking']], max_length=32)),
                ('text', models.CharField(blank=True, max_length=128)),
                ('image_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='olmap.osmimagenote')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='osmimagenotecomment',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='image_note_comments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='osmimagenote',
            name='tags',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), default=list, size=None),
        ),
        migrations.AlterField(
            model_name='entrance',
            name='type',
            field=models.CharField(blank=True, choices=[['main', 'main'], ['secondary', 'secondary'], ['service', 'service'], ['staircase', 'staircase'], ['garage', 'garage']], max_length=32),
        ),
    ]
